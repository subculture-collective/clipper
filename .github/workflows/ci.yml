name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  backend-lint:
    name: Backend Lint & Format
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run gofmt check
        run: |
          cd backend
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go files are not formatted properly:"
            gofmt -l .
            exit 1
          fi

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: backend
          args: --timeout=5m

  backend-test:
    name: Backend Test (Go ${{ matrix.go-version }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Run tests with coverage
        run: |
          cd backend
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          cd backend
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.out
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build binary
        run: |
          cd backend
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -v -o bin/api-${{ matrix.os }}-${{ matrix.arch }} ./cmd/api

      - name: Verify binary (Linux only)
        if: matrix.os == 'linux'
        run: |
          cd backend
          ./bin/api-${{ matrix.os }}-${{ matrix.arch }} --version || echo "Binary built successfully"

  frontend-lint:
    name: Frontend Lint & Format
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: TypeScript type checking
        run: |
          cd frontend
          npx tsc --noEmit

  frontend-test:
    name: Frontend Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: ['18', '20']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run tests
        run: |
          cd frontend
          npm test --if-present || echo "No tests configured yet"

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build production bundle
        run: |
          cd frontend
          npm run build

      - name: Check bundle size
        run: |
          cd frontend
          if [ -d "dist" ]; then
            du -sh dist
            find dist -type f -name "*.js" -exec ls -lh {} \;
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 7
