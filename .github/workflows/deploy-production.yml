name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    environment:
      name: production
      url: https://clipper.example.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.version.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.version.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run E2E tests
        run: |
          echo "Running E2E tests..."
          # Add E2E test commands here
          echo "E2E tests would run before production deployment"

      - name: Deploy to Production Server
        if: ${{ secrets.PRODUCTION_HOST != '' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: deploy
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /opt/clipper
            
            # Backup current deployment
            docker tag clipper-backend:latest clipper-backend:backup || true
            docker tag clipper-frontend:latest clipper-frontend:backup || true
            
            # Pull new images
            docker compose pull
            
            # Deploy new version
            docker compose up -d
            
            # Health check
            sleep 10
            if ! curl -f http://localhost:8080/health; then
              echo "Health check failed, rolling back..."
              docker tag clipper-backend:backup clipper-backend:latest
              docker tag clipper-frontend:backup clipper-frontend:latest
              docker compose up -d
              exit 1
            fi
            
            # Cleanup
            docker system prune -f

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed - rollback initiated"
          fi

      - name: Create deployment tag
        if: success() && github.event_name != 'workflow_dispatch'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          timestamp=$(date +%Y%m%d-%H%M%S)
          git tag "deploy-prod-$timestamp"
          git push origin "deploy-prod-$timestamp" || true
