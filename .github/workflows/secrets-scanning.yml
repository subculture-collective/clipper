name: Secrets Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Mondays at 9:00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  gitleaks:
    name: Scan for Secrets with Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  trufflehog:
    name: Scan for Secrets with TruffleHog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  env-file-check:
    name: Check for Committed Environment Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for .env files
        run: |
          echo "Checking for committed .env files (excluding .env.example files)..."
          
          # Find any .env files that aren't examples
          ENV_FILES=$(find . -type f \( -name ".env" -o -name ".env.local" -o -name ".env.*.local" -o -name ".env.development" -o -name ".env.production" -o -name ".env.test" \) ! -name "*.example" ! -path "*/node_modules/*" ! -path "*/.git/*" || true)
          
          if [ -n "$ENV_FILES" ]; then
            echo "❌ ERROR: Found committed environment files:"
            echo "$ENV_FILES"
            echo ""
            echo "These files should be added to .gitignore and removed from the repository."
            exit 1
          else
            echo "✅ No committed environment files found"
          fi

      - name: Check .gitignore coverage
        run: |
          echo "Verifying .gitignore files have proper environment file exclusions..."
          
          # Check root .gitignore
          if ! grep -q "^\.env$" .gitignore || ! grep -q "^\.env\.local$" .gitignore; then
            echo "⚠️  WARNING: Root .gitignore may not properly exclude .env files"
          fi
          
          # Check backend .gitignore
          if [ -f backend/.gitignore ]; then
            if ! grep -q "^\.env$\|^\.env\.\*$" backend/.gitignore; then
              echo "⚠️  WARNING: backend/.gitignore may not properly exclude .env files"
            fi
          fi
          
          # Check frontend .gitignore
          if [ -f frontend/.gitignore ]; then
            if ! grep -q "^\.env$\|^\.env\.\*$" frontend/.gitignore; then
              echo "⚠️  WARNING: frontend/.gitignore may not properly exclude .env files"
            fi
          fi
          
          echo "✅ .gitignore checks completed"

  secret-patterns:
    name: Check for Common Secret Patterns
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for hardcoded secrets patterns
        run: |
          echo "Scanning for common secret patterns in source code..."
          
          # Initialize error flag
          FOUND_ISSUES=0
          
          # Stripe keys (excluding .env.example files)
          echo "Checking for Stripe keys..."
          STRIPE_KEYS=$(grep -r "sk_live_\|pk_live_\|sk_test_\|pk_test_" --include="*.go" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.yml" --include="*.yaml" . 2>/dev/null | grep -v ".env.example" | grep -v ".env.production.example" || true)
          if [ -n "$STRIPE_KEYS" ]; then
            echo "⚠️  WARNING: Found potential Stripe keys:"
            echo "$STRIPE_KEYS"
            FOUND_ISSUES=1
          fi
          
          # AWS keys
          echo "Checking for AWS keys..."
          AWS_KEYS=$(grep -r "AKIA[0-9A-Z]\{16\}" --include="*.go" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.yml" --include="*.yaml" . 2>/dev/null | grep -v ".env.example" | grep -v ".env.production.example" || true)
          if [ -n "$AWS_KEYS" ]; then
            echo "❌ ERROR: Found potential AWS keys:"
            echo "$AWS_KEYS"
            FOUND_ISSUES=1
          fi
          
          # Private keys
          echo "Checking for private keys..."
          PRIVATE_KEYS=$(grep -r "-----BEGIN PRIVATE KEY-----\|-----BEGIN RSA PRIVATE KEY-----" --include="*.go" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.yml" --include="*.yaml" . 2>/dev/null | grep -v ".env.example" | grep -v ".env.production.example" || true)
          if [ -n "$PRIVATE_KEYS" ]; then
            echo "❌ ERROR: Found potential private keys:"
            echo "$PRIVATE_KEYS"
            FOUND_ISSUES=1
          fi
          
          # Generic passwords in code (but allow in tests and examples)
          echo "Checking for hardcoded passwords..."
          PASSWORDS=$(grep -r "password\s*=\s*['\"][^'\"]\+" --include="*.go" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . 2>/dev/null | grep -v "_test.go" | grep -v ".test.ts" | grep -v ".spec.ts" | grep -v ".env.example" | grep -v ".env.production.example" | grep -v "node_modules" || true)
          if [ -n "$PASSWORDS" ]; then
            echo "⚠️  WARNING: Found potential hardcoded passwords (verify these are test fixtures):"
            echo "$PASSWORDS" | head -10
          fi
          
          if [ $FOUND_ISSUES -eq 1 ]; then
            echo ""
            echo "❌ Secret pattern scan failed. Please review the findings above."
            exit 1
          else
            echo "✅ No critical secret patterns found"
          fi

  results:
    name: Secrets Scanning Results
    runs-on: ubuntu-latest
    needs: [gitleaks, trufflehog, env-file-check, secret-patterns]
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.gitleaks.result }}" == "failure" ] || \
             [ "${{ needs.trufflehog.result }}" == "failure" ] || \
             [ "${{ needs.env-file-check.result }}" == "failure" ] || \
             [ "${{ needs.secret-patterns.result }}" == "failure" ]; then
            echo "❌ Secrets scanning found issues. Please review the logs above."
            exit 1
          else
            echo "✅ All secrets scanning checks passed!"
          fi
