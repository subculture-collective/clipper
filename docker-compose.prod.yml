version: '3.8'

# Production docker-compose configuration
# Copy this file to your server as docker-compose.yml

services:
  backend:
    image: ghcr.io/subculture-collective/clipper/backend:latest
    container_name: clipper-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - PORT=8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - clipper-network

  frontend:
    image: ghcr.io/subculture-collective/clipper/frontend:latest
    container_name: clipper-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/health.html"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - clipper-network

  postgres:
    image: postgres:17-alpine
    container_name: clipper-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-clipper}
      - POSTGRES_USER=${POSTGRES_USER:-clipper}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-clipper}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - clipper-network

  redis:
    image: redis:8-alpine
    container_name: clipper-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - clipper-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  clipper-network:
    driver: bridge
